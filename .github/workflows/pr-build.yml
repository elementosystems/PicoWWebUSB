name: Build PicoWWebUSB Docker Images

on:
  pull_request:
    branches: [ main, development ]

jobs:
  build:
    runs-on: ["self-hosted", "Linux", "X64"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Filter changed files
        id: changes
        uses: dorny/paths-filter@v2
        with:
          filters: |
            docker:
              - 'Dockerfile'
            version:
              - 'version.json'
      
      - name: Verify version consistency
        id: get_version
        run: |
          echo "VERSION=$(jq -r '.version' version.json)" >> $GITHUB_ENV

      - name: "Build Docker image for amd64"
        if: steps.changes.outputs.docker == 'true' || steps.changes.outputs.version == 'true'
        run: |
          docker buildx build \
            --platform linux/amd64 \
            -t harbor.elementosystems.com/picow_usb/PicoWWebUSB:v${{ env.VERSION }}-amd64 \
            --load \
            .

      - name: "Build Docker image for arm v7"
        if: steps.changes.outputs.docker == 'true' || steps.changes.outputs.version == 'true'
        run: |
          docker buildx build \
            --platform linux/arm/v7 \
            --load \
            -t harbor.elementosystems.com/picow_usb/PicoWWebUSB:v${{ env.VERSION }}-armv7 \
            .

      - name: "Build Docker image for arm64"
        if: steps.changes.outputs.docker == 'true' || steps.changes.outputs.version == 'true'
        run: |
          docker buildx build \
            --platform linux/arm64 \
            -t harbor.elementosystems.com/picow_usb/PicoWWebUSB:v${{ env.VERSION }}-arm64 \
            --load \
            .

      - name: "Pull Docker image for amd6464"
        if: steps.changes.outputs.docker != 'true' && steps.changes.outputs.version != 'true'
        run: |
          docker pull harbor.elementosystems.com/picow_usb/PicoWWebUSB:v${{ env.VERSION }}-amd64
    
      - name: Build project in container
        run: |
          docker run --rm -v "${{ github.workspace }}:/src" pico-build bash -c "mkdir -p build && cd build && cmake -DPICO_SDK_PATH=/root/.pico-sdk -G Ninja .. && ninja"